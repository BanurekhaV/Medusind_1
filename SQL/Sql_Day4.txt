select * from employee

--views
--Eg 1: IT Employees
alter view vWITEmployees
as select Empid,Empname,Salary,Gender,Deptname from
employee join Department on Employee.Deptid=Department.Deptid
where Department.DeptName='IT'

--eg 2: Employee by Department
drop view vWEmpByDept

create or alter view vWEmpByDept
as select Empid,Empname,Salary,Gender,employee.Deptid, Deptname from
employee join Department on Employee.Deptid=Department.Deptid

sp_helptext vWITEmployees

select * from vWITEmployees
select * from vWEmpByDept

insert into vWEmpByDept values(200,'Banurekha',36000,'Female','IT') -- not possible to 
-- insert data through a view made of more than 1 table


select * from Department
select * from employee

--to ensure permanent changes to be made to the base tables or not we can
--use transaction modes as below
--1. Explicit Transaction mode
begin tran
update vWEmpByDept set deptname='Sales' where empid=103 -- update resulted in a chaotic data
select * from Department
select * from vWEmpByDept
rollback

--2. Implicit transaction mode
set implicit_transactions on
update vWEmpByDept set deptname='Sales' where empid=103 -- update resulted in a chaotic data
select * from Department
select * from vWEmpByDept
rollback
--in order to effect the below query of updation we can do changes as below
--1. Drop the unique index on empname
--2. change the dept id of the employee
update employee set deptid=6 where empid=98

update vWEmpByDept set empname='BH Vignesh' where deptid=6 -- update is successful

create or alter view vwtest
as select Empid,Empname,Salary,Phoneno from employee

select * from vwtest
select * from employee

insert into vwtest values(200,'Banurekha',36000,'9999999') -- insertion success

update vwtest set phoneno='123456789' where empid=200

delete from vwtest where empid=200

--Procedures
create procedure MyProc1
as 
begin
 select * from employee
 end

 --to excecute the procedure
 exec MyProc1

 --eg 2: 
 create or alter proc MyProc2
 as
 begin
  print 'Hello World'
  select * from employee where deptid in(1,2,4)
  end

  exec MyProc2

  --eg 3 Input Parameter
 create or alter proc getEmployeeById @eid int
  as
  begin
  select * from employee where empid=@eid
  end

  execute getEmployeeById 104 

  --eg 4: 
  create or alter proc getEmpByName @ename varchar(20)
  as
  begin
  select salary from employee where empname=@ename
  end

  exec getEmpByName 'Amit'

  --eg 5:
  create proc getSalaryByName @ename varchar(20)  -- input variables
  as
  begin
  declare @esal float  -- local variable
  select @esal=salary from employee where empname=@ename
  if(@esal <38000)
   begin
    update employee set salary =@esal+100 where empname=@ename
	select * from employee where empname=@ename
  end
  end
  
  exec getSalaryByName 'BH Vignesh'

  --eg output parameter
  create or alter proc getEmpSal(@eid int, @sal float output)
  as
  begin
  select @sal=salary from employee where empid=@eid
  set @sal=@sal+500
  end
 
 --to execute procedures with input and output parameters
  -- 1st way of executing
  declare @outsal float
  exec getEmpSal 99, @outsal output -- standard way of calling proc
  print @outsal
  set @outsal=@outsal+100
  update employee set salary = @outsal where empid=99

  select * from employee where empid=107

  --2nd way of executing by changing the order of parameter
  declare @sal1 float
  exec getEmpSal @sal=@sal1 output, @eid=107 
  print @sal1

  

